# -*- coding: utf-8 -*-
"""experiment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RVoJG3JYCr0f8Yk1rmQDel_5QX0ICRHy
"""

from lesk.models import plain_lesk, most_common_sense, dist_lesk
from lesk.dataloader import ModelType
from tqdm.notebook import tqdm_notebook


def experiment_seneval(train_instances, train_key, model_type, remove_stopwords=True, vector_type=ModelType.GLOSS):
    predictions = []
    targets = []
    for id, wsd in tqdm_notebook(train_instances.items()):
        lemma = wsd.lemma.decode("utf-8")
        context = wsd.context
        context_vector = wsd.context_vector
        if model_type == ModelType.MFS:
            prediction = most_common_sense(lemma)
        elif model_type == ModelType.PLAIN:
            prediction = plain_lesk(context, lemma, remove_stopwords, lowercase=True)
        else:
            prediction = dist_lesk(context_vector, lemma, remove_stopwords, lowercase=True, sense_type=ModelType.SENSE,
                                   vector_type=vector_type)
        predictions.append(prediction)
        targets.append(train_key[id])
    return predictions, targets


def experiment_cor(instances, keys, model_type, remove_stopwords=True, vector_type=ModelType.GLOSS):
    predictions = []
    targets = []
    for target, wsd in tqdm_notebook(zip(keys, instances)):
        lemma = wsd.lemma.decode("utf-8")
        context = wsd.context
        context_vector = wsd.context_vector
        if model_type == ModelType.MFS:
            prediction = most_common_sense(lemma)
        elif model_type == ModelType.PLAIN:
            prediction = plain_lesk(context, lemma, remove_stopwords, lowercase=True)
        else:
            prediction = dist_lesk(context_vector, lemma, remove_stopwords, lowercase=True, sense_type=ModelType.SENSE,
                                   vector_type=vector_type)
            predictions.append(prediction)
            targets.append(target)
        return predictions, targets


def evaluate_accuracy(predictions, targets):
    """Evaluate accuracy 
    """
    correct = 0
    total = len(targets)

    for prediction, target in zip(predictions, targets):
        if str(target) in str(prediction):
            correct += 1
    accuracy = round((correct / total) * 100, 4)
    return accuracy
