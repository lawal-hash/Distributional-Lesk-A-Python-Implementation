# -*- coding: utf-8 -*-
"""models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RVoJG3JYCr0f8Yk1rmQDel_5QX0ICRHy
"""

from lesk.util import *
from lesk.dataloader import ModelType


def most_common_sense(ambiguous_word):
    """Implementation the most common lesk"""
    counts = {}
    for i in wn.synsets(ambiguous_word):
        counts[i] = sum([j.count() for j in i.lemmas()])
    try:
        prediction = max(counts, key=counts.get)
    except ValueError:
        prediction = 'None'
    return prediction


def plain_lesk(context_sentence, ambiguous_word, remove_stopwords=True, lowercase=True, sense_type=None):
    """Implementation of Plain Lesk"""
    definitions = definition(ambiguous_word, remove_stopwords, lowercase, sense_type)
    best_sense = greedy_overlap(context_sentence, definitions)
    return best_sense


def dist_lesk(context_vector, ambiguous_word, remove_stopwords=True, lowercase=True, sense_type=ModelType.SENSE,
              vector_type=ModelType.BOTH):
    """Implementation of distributional lesk"""
    try:
        ambiguous_word = lemmatize(ambiguous_word)
        definitions, lexemes_vectors = definition(ambiguous_word, remove_stopwords, lowercase,
                                                  sense_type=ModelType.SENSE)
        sense = score(context_vector, definitions, lexemes_vectors, vector_type=vector_type)
    except KeyError:
        sense = 'None'
    return sense
